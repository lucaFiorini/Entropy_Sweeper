{"version":3,"file":"bundle.js","mappings":"mBACA,I,KCAwB,CAACA,IACH,oBAAXC,QAA0BA,OAAOC,aAC1CC,OAAOC,eAAeJ,EAASC,OAAOC,YAAa,CAAEG,MAAO,WAE7DF,OAAOC,eAAeJ,EAAS,aAAc,CAAEK,OAAO,K,ICHvD,MAAMC,EACLC,IAAM,EACNC,IAAM,EACNC,QAAS,EACTC,YAAa,EACbC,WAAY,EACZC,cAAgB,EAChBC,cAAgB,EAEhBC,WAAAA,CACCP,EACAC,EACAC,GAAS,EACTC,GAAa,EACbC,GAAY,EACZC,EAAgB,EAChBC,EAAgB,GAEhBE,KAAKN,OAASA,EACdM,KAAKL,WAAaA,EAClBK,KAAKJ,UAAYA,EACjBI,KAAKH,cAAgBA,EACrBG,KAAKF,cAAgBA,CACtB,CAEAG,QAAAA,GACC,OAAID,KAAKL,WACDK,KAAKN,OAAS,IAAMM,KAAKH,cAAcI,WACpCD,KAAKJ,UACR,IAEA,GAET,CAEA,WAAIM,GACH,OAAQF,KAAKN,SAAWM,KAAKL,aAAeK,KAAKJ,SAClD,CACA,YAAIO,GACH,OAAQH,KAAKL,aAAeK,KAAKJ,SAClC,CACA,aAAIQ,GACH,OAAOJ,KAAKL,YAAcK,KAAKJ,SAChC,CACA,cAAIS,GACH,OAAOL,KAAKL,YAAcK,KAAKN,MAChC,EAmOD,QAhOA,MACCY,MAAQ,GACRC,KAAO,EACPC,KAAO,EACPC,UAAY,EACZC,qBAAsB,EACtBC,UAAW,EACXC,KAAM,EAENb,WAAAA,CAAYc,EAAGC,EAAGL,GACjB,IACEM,OAAOC,UAAUH,KACjBE,OAAOC,UAAUF,KACjBC,OAAOC,UAAUP,IAClBI,GAAK,GACLC,GAAK,GACLL,EAAY,GACZA,GAAaI,EAAIC,EAEjB,MAAM,IAAIG,MAAM,oCAEjBjB,KAAKO,KAAOM,EACZb,KAAKQ,KAAOM,EACZd,KAAKS,UAAYA,EACjBT,MAAK,IACLA,MAAK,IACLA,MAAK,GACN,CAEA,KACCA,KAAKM,MAAQ,GACb,IAAK,IAAIY,EAAI,EAAGA,EAAIlB,KAAKO,KAAMW,IAAK,CACnClB,KAAKM,MAAMY,GAAK,GAChB,IAAK,IAAIC,EAAI,EAAGA,EAAInB,KAAKQ,KAAMW,IAC9BnB,KAAKM,MAAMY,GAAGC,GAAK,IAAI5B,EAAK2B,EAAGC,EAEjC,CACAnB,KAAKW,UAAW,CACjB,CAEA,KACC,IAAIS,EAAc,EAClB,KAAOA,EAAcpB,KAAKS,WAAW,CACpC,MAAMjB,EAAM6B,KAAKC,MAAMD,KAAKE,SAAWvB,KAAKO,MACtCd,EAAM4B,KAAKC,MAAMD,KAAKE,SAAWvB,KAAKQ,MACtCgB,EAAOxB,KAAKM,MAAMd,GAAKC,GACxB+B,EAAK9B,SACT8B,EAAK9B,QAAS,EACd0B,IAEF,CACD,CAEA,KACC,IAAK,IAAIF,EAAI,EAAGA,EAAIlB,KAAKO,KAAMW,IAC9B,IAAK,IAAIC,EAAI,EAAGA,EAAInB,KAAKQ,KAAMW,IAAK,CACnC,MAAMK,EAAOxB,KAAKM,MAAMY,GAAGC,GAC3B,GAAIK,EAAK9B,OAAQ,SACjB,IAAI+B,EAAQ,EACZ,IAAK,IAAIC,GAAK,EAAGA,GAAK,EAAGA,IACxB,IAAK,IAAIC,GAAK,EAAGA,GAAK,EAAGA,IAAK,CAC7B,GAAU,IAAND,GAAiB,IAANC,EAAS,SACxB,MAAMC,EAASV,EAAIQ,EACbG,EAASV,EAAIQ,EAElBC,GAAU,GACVA,EAAS5B,KAAKO,MACdsB,GAAU,GACVA,EAAS7B,KAAKQ,MAEVR,KAAKM,MAAMsB,GAAQC,GAAQnC,QAAQ+B,GAEzC,CAEDD,EAAK3B,cAAgB4B,CACtB,CAEF,CAEA,GAAajC,EAAKC,GACjBO,KAAKM,MAAMd,GAAKC,GAAKE,YAAa,EAElC,IAAK,IAAI+B,GAAK,EAAGA,GAAK,EAAGA,IACxB,IAAK,IAAIC,GAAK,EAAGA,GAAK,EAAGA,IAAK,CAC7B,GAAU,IAAND,GAAiB,IAANC,EAAS,SACxB,MAAMC,EAASpC,EAAMkC,EACfG,EAASpC,EAAMkC,EAEpBC,GAAU,GACVA,EAAS5B,KAAKO,MACdsB,GAAU,GACVA,EAAS7B,KAAKQ,MAEdR,KAAKM,MAAMsB,GAAQC,GAAQ/B,eAE7B,CAGD,GAAIE,KAAKM,MAAMd,GAAKC,GAAKC,OAExB,OADAM,KAAKW,UAAW,EACT,CAAEmB,SAAS,EAAMC,SAAU,GAGnC,IAAIA,EAAW,EACf,GAA2C,IAAvC/B,KAAKM,MAAMd,GAAKC,GAAKI,cACxB,IAAK,IAAI6B,GAAK,EAAGA,GAAK,EAAGA,IACxB,IAAK,IAAIC,GAAK,EAAGA,GAAK,EAAGA,IACd,IAAND,GAAiB,IAANC,IAEfI,GADe/B,KAAKgC,WAAWxC,EAAMkC,EAAGjC,EAAMkC,GAC3BI,UAKtB,MAAO,CAAED,SAAS,EAAOC,WAC1B,CAEAC,UAAAA,CAAWxC,EAAKC,GACf,GAAIO,KAAKW,SAAU,MAAO,CAAEmB,SAAS,EAAOC,SAAU,GACtD,GAAIvC,EAAM,GAAKA,GAAOQ,KAAKO,MAAQd,EAAM,GAAKA,GAAOO,KAAKQ,KACzD,MAAO,CAAEsB,SAAS,EAAOC,SAAU,GAEpC,MAAMP,EAAOxB,KAAKM,MAAMd,GAAKC,GAC7B,GAAI+B,EAAK7B,YAAc6B,EAAK5B,UAC3B,MAAO,CAAEkC,SAAS,EAAOC,SAAU,GAEpC,GAAI/B,KAAKU,oBAER,IADAV,KAAKU,qBAAsB,EACpBc,EAAK9B,QACX8B,EAAK9B,QAAS,EACdM,MAAK,EAAY,GACjBA,MAAK,IAIP,MAAMiC,EAASjC,MAAK,EAAaR,EAAKC,GAMtC,OAJIO,KAAKkC,qBAAuB,IAC/BlC,KAAKY,KAAM,GAGLqB,CACR,CAEAE,aAAAA,GACC,IAAIC,EAAS,GACb,IAAK,IAAIlB,EAAI,EAAGA,EAAIlB,KAAKO,KAAMW,IAAK,CACnC,IAAImB,EAAS,GACb,IAAK,IAAIlB,EAAI,EAAGA,EAAInB,KAAKQ,KAAMW,IAC1BnB,KAAKM,MAAMY,GAAGC,GAAGxB,WAChBK,KAAKM,MAAMY,GAAGC,GAAGzB,OACpB2C,GAAU,KAEVA,GAAUrC,KAAKM,MAAMY,GAAGC,GAAGtB,cAAgB,IAElCG,KAAKM,MAAMY,GAAGC,GAAGvB,UAC3ByC,GAAU,KAEVA,GAAU,KAGZD,GAAUC,EAAOC,OAAS,IAC3B,CACA,OAAOF,EAAOE,MACf,CAEAC,UAAAA,GACCC,QAAQC,IAAIzC,KAAKmC,gBAClB,CAQAO,QAAAA,CAASlD,EAAKC,GACb,GAAIO,KAAKW,SAAU,OAAO,EAC1B,GAAInB,EAAM,GAAKA,GAAOQ,KAAKO,MAAQd,EAAM,GAAKA,GAAOO,KAAKQ,KACzD,OAAO,EAER,MAAMgB,EAAOxB,KAAKM,MAAMd,GAAKC,GAC7B,GAAI+B,EAAK7B,WAAY,OAAO,EAC5B6B,EAAK5B,WAAa4B,EAAK5B,UACnB4B,EAAK5B,WACJI,KAAKkC,qBAAuB,IAC/BlC,KAAKY,KAAM,EAGd,CAQA+B,OAAAA,CAAQnD,EAAKC,GACZ,OAAID,EAAM,GAAKA,GAAOQ,KAAKO,MAAQd,EAAM,GAAKA,GAAOO,KAAKQ,KAClD,KACDR,KAAKM,MAAMd,GAAKC,EACxB,CAEAyC,iBAAAA,GACC,IAAIU,EAAU,EACVC,EAAa,EACjB,IAAK,IAAI3B,EAAI,EAAGA,EAAIlB,KAAKO,KAAMW,IAC9B,IAAK,IAAIC,EAAI,EAAGA,EAAInB,KAAKQ,KAAMW,IAC1BnB,KAAKM,MAAMY,GAAGC,GAAGzB,QAAQmD,IACzB7C,KAAKM,MAAMY,GAAGC,GAAGvB,WAAWgD,IAGlC,OAAOvB,KAAKyB,IAAI,EAAGD,EAAaD,EACjC,CAEAG,QAAAA,GACC,OAAO/C,KAAKM,KACb,CAEA0C,OAAAA,GACC,MAAO,CAAEzC,KAAMP,KAAKO,KAAMC,KAAMR,KAAKQ,KACtC,GC5ND,EApDA,MACCT,WAAAA,GACCC,KAAKiD,MAAQ,GACbjD,KAAKkD,gBAAkB,EACxB,CAEAC,OAAAA,CAAQ3B,GACFxB,KAAKiD,MAAMG,MAAMtC,GAAMA,EAAEtB,MAAQgC,EAAKhC,KAAOsB,EAAErB,MAAQ+B,EAAK/B,OAChEO,KAAKiD,MAAMI,KAAK7B,EAElB,CAEA8B,QAAAA,GACC,OAAOtD,KAAKiD,KACb,CAEAM,kBAAAA,CAAmBC,GAClBxD,KAAKkD,gBAAkBM,CACxB,CAEAC,kBAAAA,CAAmBC,GAClB,GAAI1D,KAAKkD,iBAAmBlD,KAAKkD,gBAAgBS,OAAS,EACzD,OAAO3D,KAAKkD,gBAEb,MAAMU,EAAS,IAAIC,IACnB,IAAK,MAAM,IAAErE,EAAG,IAAEC,KAASO,KAAKiD,MAC/B,IAAK,IAAIa,GAAM,EAAGA,GAAM,EAAGA,IAC1B,IAAK,IAAIC,GAAM,EAAGA,GAAM,EAAGA,IAAM,CAChC,GAAW,IAAPD,GAAmB,IAAPC,EAAU,SAC1B,MAAMC,EAAKxE,EAAMsE,EAChBG,EAAKxE,EAAMsE,EACZ,GACCC,GAAM,GACNA,EAAKN,EAAYnD,MACjB0D,GAAM,GACNA,EAAKP,EAAYlD,KAChB,CACD,MAAM0D,EAAWR,EAAYf,QAAQqB,EAAIC,GACpCC,EAASvE,YAAeuE,EAAStE,WACrCgE,EAAOO,IAAI,GAAGH,KAAMC,IAEtB,CACD,CAMF,OAHAjE,KAAKkD,gBAAkBkB,MAAMC,KAAKT,GAAQU,KAAKC,GAC9CA,EAAIC,MAAM,KAAKF,IAAIvD,UAEbf,KAAKkD,eACb,GC8GD,EAxJA,MACCuB,QAAU,EACVf,YAAc,KACdgB,OAAS,GAET3E,WAAAA,CAAY2D,GACX,KAAMA,aAAuBiB,GAC5B,MAAM,IAAI1D,MAAM,yCAEjBjB,KAAK0D,YAAcA,EACnB1D,KAAKyE,QAAU,CAChB,CAEAG,gBAAAA,GACC5E,KAAK6E,kBACL7E,KAAKyE,QAAU,EAEfzE,KAAK0E,OAAOI,SAAQ,CAACC,EAAOC,KAC3B,MAAM,WAAEC,EAAU,QAAER,EAAO,gBAAES,IAAoBC,EAAAA,EAAAA,kBAChDJ,EACA/E,KAAK0D,aAENlB,QAAQC,IAAI,SAASuC,EAAQ,MAC7BxC,QAAQC,IAAI,mBAAmByC,KAC/B1C,QAAQC,IAAI,2BAA2BwC,KACvCzC,QAAQC,IAAI,qBAAqBgC,EAAQW,QAAQ,MACjDpF,KAAKyE,SAAWA,KAGjBjC,QAAQC,IAAI,oBAAoBzC,KAAKyE,QAAQW,QAAQ,UACtD,CAEAC,WAAAA,GAC4B,IAAvBrF,KAAK0E,OAAOf,OAKhB3D,KAAK0E,OAAOI,SAAQ,CAACC,EAAOC,KAC3BxC,QAAQC,IAAI,SAASuC,EAAQ,MAC7BD,EAAMO,MAAMtF,KAAK0D,gBANjBlB,QAAQC,IAAI,mBAQd,CAEAoC,eAAAA,GACC7E,KAAK0E,OAAS,GACd,MAAMa,EAAUnB,MAAMC,KAAK,CAAEV,OAAQ3D,KAAK0D,YAAYnD,OAAQ,IAC7D6D,MAAMpE,KAAK0D,YAAYlD,MAAMgF,MAAK,KAG7BC,EAAcjE,GAASA,EAAK7B,YAAc6B,EAAK3B,cAAgB,EAE/D4D,EAAqBA,CAACiC,EAAIC,KAC/B,MAAM/B,EAAS,GACf,IAAK,IAAIE,GAAM,EAAGA,GAAM,EAAGA,IAC1B,IAAK,IAAIC,GAAM,EAAGA,GAAM,EAAGA,IAAM,CAChC,GAAW,IAAPD,GAAmB,IAAPC,EAAU,SAC1B,MAAMC,EAAK0B,EAAK5B,EACVG,EAAK0B,EAAK5B,EAChB,GACCC,GAAM,GACNA,EAAKhE,KAAK0D,YAAYnD,MACtB0D,GAAM,GACNA,EAAKjE,KAAK0D,YAAYlD,KACrB,CACD,MAAM0D,EAAWlE,KAAK0D,YAAYf,QAAQqB,EAAIC,GACzCC,EAASvE,YAAeuE,EAAStE,WACrCgE,EAAOP,KAAK,CAACW,EAAIC,GAEnB,CACD,CAED,OAAOL,GAGFgC,EAAwBA,CAACC,EAAOC,KACrC,MAAMC,EAAe,IAAIlC,IACnBmC,EAAO,GAEPC,EAAOC,IACZ,MAAMC,EAAM,GAAGD,EAAK,MAAMA,EAAK,KAC/B,GAAIH,EAAaK,IAAID,GAAM,OAC3BJ,EAAa5B,IAAIgC,GACjBH,EAAK3C,KAAK,CAAE7D,IAAK0G,EAAK,GAAIzG,IAAKyG,EAAK,KAEpC,IAAIG,EAAYP,EAAMQ,IAAIH,IAAQ,GAClC,IAAK,MAAMjC,KAAYmC,EACtBJ,EAAI/B,IAKN,OADA+B,EAAIJ,GACGG,GAGR,IAAK,IAAI9E,EAAI,EAAGA,EAAIlB,KAAK0D,YAAYnD,KAAMW,IAC1C,IAAK,IAAIC,EAAI,EAAGA,EAAInB,KAAK0D,YAAYlD,KAAMW,IAE1C,GAAIsE,EADSzF,KAAK0D,YAAYf,QAAQzB,EAAGC,MAChBoE,EAAQrE,GAAGC,GAAI,CACvC,MAAM2E,EAAQ,IAAIS,IACZC,EAAQ,CAAC,CAACtF,EAAGC,IAGnB,IAFAoE,EAAQrE,GAAGC,IAAK,EAETqF,EAAM7C,OAAS,GAAG,CACxB,MAAO+B,EAAIC,GAAMa,EAAMC,QACjBvD,EAAkBO,EAAmBiC,EAAIC,GAE/C,IAAK,MAAOe,EAAIC,KAAOzD,EACtB,IAAK,IAAIY,GAAM,EAAGA,GAAM,EAAGA,IAC1B,IAAK,IAAIC,GAAM,EAAGA,GAAM,EAAGA,IAAM,CAChC,GAAW,IAAPD,GAAmB,IAAPC,EAAU,SAC1B,MAAMC,EAAK0C,EAAK5C,EACVG,EAAK0C,EAAK5C,EAEfC,GAAM,GACNA,EAAKhE,KAAK0D,YAAYnD,MACtB0D,GAAM,GACNA,EAAKjE,KAAK0D,YAAYlD,MAIlBiF,EADHzF,KAAK0D,YAAYf,QAAQqB,EAAIC,MAExB6B,EAAMM,IAAI,GAAGV,KAAMC,MACvBG,EAAMc,IAAI,GAAGlB,KAAMC,IAAM,IAC1BG,EACEQ,IAAI,GAAGZ,KAAMC,KACbtC,KAAK,CAACW,EAAIC,IACPsB,EAAQvB,GAAIC,KAChBuC,EAAMnD,KAAK,CAACW,EAAIC,IAChBsB,EAAQvB,GAAIC,IAAM,GAItB,CAGH,CAEA,MACM4C,EAAajB,EADD,CAAC1E,EAAGC,GAC8B2E,GAEpD,GAAIe,EAAWlD,OAAS,EAAG,CAC1B,MAAMoB,EAAQ,IAAI+B,EAClBD,EAAW/B,SAAStD,GAASuD,EAAM5B,QAAQ3B,KAC3CxB,KAAK0E,OAAOrB,KAAK0B,EAClB,CACD,CAGH,GCtJDgC,SAASC,iBAAiB,oBAAoB,KAC7C,MAAMC,EAAYF,SAASG,eAAe,cACpCC,EAAcJ,SAASG,eAAe,gBACtCE,EAAeL,SAASG,eAAe,iBAE7C,IAGIxD,EACA2D,EAJA9G,EAAO,GACPC,EAAO,GACP8G,EAAQ,GAIZ,SAASC,IACR,IACC7D,EAAc,IAAIiB,EAAYpE,EAAMC,EAAM8G,GAC1CD,EAA4B,IAAIG,EAAkB9D,GAOpD,WACCuD,EAAUQ,UAAY,GACtBR,EAAUS,MAAMC,oBAAsB,UAAUnH,WAEhD,IAAK,IAAIU,EAAI,EAAGA,EAAIX,EAAMW,IACzB,IAAK,IAAIC,EAAI,EAAGA,EAAIX,EAAMW,IAAK,CAC9B,MAAMK,EAAOuF,SAASa,cAAc,OACpCpG,EAAKqG,UAAY,OACjBrG,EAAKsG,QAAQtI,IAAM0B,EACnBM,EAAKsG,QAAQrI,IAAM0B,EAEnBK,EAAKwF,iBAAiB,SAAS,IAAMe,EAAgB7G,EAAGC,KACxDK,EAAKwF,iBAAiB,eAAgBgB,IACrCA,EAAEC,iBACFC,EAAqBhH,EAAGC,MAGzB8F,EAAUkB,YAAY3G,EACvB,CAEF,CA1BE4G,EACD,CAAE,MAAOC,GACRC,MAAM,8BAAgCD,EAAME,QAC7C,CACD,CAwBA,SAASR,EAAgBvI,EAAKC,GACzBiE,EAAY/C,UAEH+C,EAAYf,QAAQnD,EAAKC,GAC7BG,YAEI8D,EAAY1B,WAAWxC,EAAKC,GAE9BqC,SACVwG,MAAM,cAoDR,WACC,IAAK,IAAIpH,EAAI,EAAGA,EAAIX,EAAMW,IACzB,IAAK,IAAIC,EAAI,EAAGA,EAAIX,EAAMW,IACZuC,EAAYf,QAAQzB,EAAGC,GAC3BzB,QACR8I,EAAWtH,EAAGC,EAIlB,CA5DEsH,KAEAjG,QAAQkG,QACRrB,EAA0BxC,kBAC1BwC,EAA0BhC,cAe5B,WACC,IAAK,IAAI7F,EAAM,EAAGA,EAAMe,EAAMf,IAC7B,IAAK,IAAIC,EAAM,EAAGA,EAAMe,EAAMf,IAC7B+I,EAAWhJ,EAAKC,EAGnB,CApBEkJ,IAEF,CAEA,SAAST,EAAqB1I,EAAKC,GAC9BiE,EAAY/C,UAEH+C,EAAYf,QAAQnD,EAAKC,GAC7BE,aAET+D,EAAYhB,SAASlD,EAAKC,GAC1B+I,EAAWhJ,EAAKC,GACjB,CAUA,SAAS+I,EAAWhJ,EAAKC,GACxB,MAAM+B,EAAOkC,EAAYf,QAAQnD,EAAKC,GAChCmJ,EAAc7B,SAAS8B,cAC5B,mBAAmBrJ,iBAAmBC,OAGnC+B,EAAK7B,YACRiJ,EAAYE,UAAU3E,IAAI,YACtB3C,EAAK9B,QACRkJ,EAAYE,UAAU3E,IAAI,QAC1ByE,EAAYG,YAAc,KAE1BH,EAAYG,YACXvH,EAAK3B,cAAgB,EAAI2B,EAAK3B,cAAgB,IAEtC2B,EAAK5B,WACfgJ,EAAYE,UAAU3E,IAAI,WAC1ByE,EAAYG,YAAc,MAE1BH,EAAYE,UAAUE,OAAO,WAAY,OAAQ,WACjDJ,EAAYG,YAAc,GAE5B,CAgBA3B,EAAaJ,iBAAiB,UAAWiC,IACxCA,EAAMhB,iBACN1H,EAAO2I,SAASnC,SAASG,eAAe,QAAQ5H,OAChDkB,EAAO0I,SAASnC,SAASG,eAAe,QAAQ5H,OAChDgI,EAAQ4B,SAASnC,SAASG,eAAe,SAAS5H,OAClDiI,OAGDJ,EAAYH,iBAAiB,QAASO,GAEtCA,M","sources":["webpack:///webpack/bootstrap","webpack:///webpack/runtime/make namespace object","webpack:///./src/minesweeper.js","webpack:///./src/chains/Chain.js","webpack:///./src/entropy/entropyCalculator.js","webpack:///./src/script.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/** @format */\n\nclass Cell {\n\trow = 0;\n\tcol = 0;\n\tisMine = false;\n\tisRevealed = false;\n\tisFlagged = false;\n\tadjacentMines = 0;\n\tadjacentCells = 8;\n\n\tconstructor(\n\t\trow,\n\t\tcol,\n\t\tisMine = false,\n\t\tisRevealed = false,\n\t\tisFlagged = false,\n\t\tadjacentMines = 0,\n\t\tadjacentCells = 8\n\t) {\n\t\tthis.isMine = isMine;\n\t\tthis.isRevealed = isRevealed;\n\t\tthis.isFlagged = isFlagged;\n\t\tthis.adjacentMines = adjacentMines;\n\t\tthis.adjacentCells = adjacentCells;\n\t}\n\n\ttoString() {\n\t\tif (this.isRevealed) {\n\t\t\treturn this.isMine ? \"*\" : this.adjacentMines.toString();\n\t\t} else if (this.isFlagged) {\n\t\t\treturn \"F\";\n\t\t} else {\n\t\t\treturn \".\";\n\t\t}\n\t}\n\n\tget isEmpty() {\n\t\treturn !this.isMine && !this.isRevealed && !this.isFlagged;\n\t}\n\tget isHidden() {\n\t\treturn !this.isRevealed && !this.isFlagged;\n\t}\n\tget isVisible() {\n\t\treturn this.isRevealed || this.isFlagged;\n\t}\n\tget isExploded() {\n\t\treturn this.isRevealed && this.isMine;\n\t}\n}\n\nclass Minesweeper {\n\tboard = [];\n\trows = 0;\n\tcols = 0;\n\tmineCount = 0;\n\tisFirstCellRevealed = true;\n\tgameOver = false;\n\twon = false;\n\n\tconstructor(r, c, mineCount) {\n\t\tif (\n\t\t\t!Number.isInteger(r) ||\n\t\t\t!Number.isInteger(c) ||\n\t\t\t!Number.isInteger(mineCount) ||\n\t\t\tr <= 0 ||\n\t\t\tc <= 0 ||\n\t\t\tmineCount < 0 ||\n\t\t\tmineCount >= r * c\n\t\t) {\n\t\t\tthrow new Error(\"Invalid board size or mine count\");\n\t\t}\n\t\tthis.rows = r;\n\t\tthis.cols = c;\n\t\tthis.mineCount = mineCount;\n\t\tthis.#createBoard();\n\t\tthis.#placeMines();\n\t\tthis.#calculateAdjacentMines();\n\t}\n\n\t#createBoard() {\n\t\tthis.board = [];\n\t\tfor (let i = 0; i < this.rows; i++) {\n\t\t\tthis.board[i] = [];\n\t\t\tfor (let j = 0; j < this.cols; j++) {\n\t\t\t\tthis.board[i][j] = new Cell(i, j);\n\t\t\t}\n\t\t}\n\t\tthis.gameOver = false;\n\t}\n\n\t#placeMines() {\n\t\tlet placedMines = 0;\n\t\twhile (placedMines < this.mineCount) {\n\t\t\tconst row = Math.floor(Math.random() * this.rows);\n\t\t\tconst col = Math.floor(Math.random() * this.cols);\n\t\t\tconst cell = this.board[row][col];\n\t\t\tif (!cell.isMine) {\n\t\t\t\tcell.isMine = true;\n\t\t\t\tplacedMines++;\n\t\t\t}\n\t\t}\n\t}\n\n\t#calculateAdjacentMines() {\n\t\tfor (let i = 0; i < this.rows; i++) {\n\t\t\tfor (let j = 0; j < this.cols; j++) {\n\t\t\t\tconst cell = this.board[i][j];\n\t\t\t\tif (cell.isMine) continue;\n\t\t\t\tlet count = 0;\n\t\t\t\tfor (let x = -1; x <= 1; x++) {\n\t\t\t\t\tfor (let y = -1; y <= 1; y++) {\n\t\t\t\t\t\tif (x === 0 && y === 0) continue;\n\t\t\t\t\t\tconst newRow = i + x;\n\t\t\t\t\t\tconst newCol = j + y;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tnewRow >= 0 &&\n\t\t\t\t\t\t\tnewRow < this.rows &&\n\t\t\t\t\t\t\tnewCol >= 0 &&\n\t\t\t\t\t\t\tnewCol < this.cols\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tif (this.board[newRow][newCol].isMine) count++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcell.adjacentMines = count;\n\t\t\t}\n\t\t}\n\t}\n\n\t#_revealCell(row, col) {\n\t\tthis.board[row][col].isRevealed = true;\n\n\t\tfor (let x = -1; x <= 1; x++) {\n\t\t\tfor (let y = -1; y <= 1; y++) {\n\t\t\t\tif (x === 0 && y === 0) continue;\n\t\t\t\tconst newRow = row + x;\n\t\t\t\tconst newCol = col + y;\n\t\t\t\tif (\n\t\t\t\t\tnewRow >= 0 &&\n\t\t\t\t\tnewRow < this.rows &&\n\t\t\t\t\tnewCol >= 0 &&\n\t\t\t\t\tnewCol < this.cols\n\t\t\t\t) {\n\t\t\t\t\tthis.board[newRow][newCol].adjacentCells--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.board[row][col].isMine) {\n\t\t\tthis.gameOver = true;\n\t\t\treturn { mineHit: true, revealed: 1 };\n\t\t}\n\n\t\tlet revealed = 1;\n\t\tif (this.board[row][col].adjacentMines === 0) {\n\t\t\tfor (let x = -1; x <= 1; x++) {\n\t\t\t\tfor (let y = -1; y <= 1; y++) {\n\t\t\t\t\tif (x === 0 && y === 0) continue;\n\t\t\t\t\tconst result = this.revealCell(row + x, col + y);\n\t\t\t\t\trevealed += result.revealed;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn { mineHit: false, revealed };\n\t}\n\n\trevealCell(row, col) {\n\t\tif (this.gameOver) return { mineHit: false, revealed: 0 };\n\t\tif (row < 0 || row >= this.rows || col < 0 || col >= this.cols) {\n\t\t\treturn { mineHit: false, revealed: 0 };\n\t\t}\n\t\tconst cell = this.board[row][col];\n\t\tif (cell.isRevealed || cell.isFlagged) {\n\t\t\treturn { mineHit: false, revealed: 0 };\n\t\t}\n\t\tif (this.isFirstCellRevealed) {\n\t\t\tthis.isFirstCellRevealed = false;\n\t\t\twhile (cell.isMine) {\n\t\t\t\tcell.isMine = false;\n\t\t\t\tthis.#placeMines(1);\n\t\t\t\tthis.#calculateAdjacentMines();\n\t\t\t}\n\t\t}\n\n\t\tconst result = this.#_revealCell(row, col);\n\n\t\tif (this.getRemainingMines() <= 0) {\n\t\t\tthis.won = true;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tboardToString() {\n\t\tlet output = \"\";\n\t\tfor (let i = 0; i < this.rows; i++) {\n\t\t\tlet rowStr = \"\";\n\t\t\tfor (let j = 0; j < this.cols; j++) {\n\t\t\t\tif (this.board[i][j].isRevealed) {\n\t\t\t\t\tif (this.board[i][j].isMine) {\n\t\t\t\t\t\trowStr += \"* \";\n\t\t\t\t\t} else {\n\t\t\t\t\t\trowStr += this.board[i][j].adjacentMines + \" \";\n\t\t\t\t\t}\n\t\t\t\t} else if (this.board[i][j].isFlagged) {\n\t\t\t\t\trowStr += \"F \";\n\t\t\t\t} else {\n\t\t\t\t\trowStr += \". \";\n\t\t\t\t}\n\t\t\t}\n\t\t\toutput += rowStr.trim() + \"\\n\";\n\t\t}\n\t\treturn output.trim();\n\t}\n\n\tprintBoard() {\n\t\tconsole.log(this.boardToString());\n\t}\n\n\t/**\n\t *\n\t * @param {number} row\n\t * @param {number} col\n\t * @returns {boolean}\n\t */\n\tflagCell(row, col) {\n\t\tif (this.gameOver) return false;\n\t\tif (row < 0 || row >= this.rows || col < 0 || col >= this.cols) {\n\t\t\treturn false;\n\t\t}\n\t\tconst cell = this.board[row][col];\n\t\tif (cell.isRevealed) return false;\n\t\tcell.isFlagged = !cell.isFlagged;\n\t\tif (cell.isFlagged) {\n\t\t\tif (this.getRemainingMines() <= 0) {\n\t\t\t\tthis.won = true;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * @param {number} row\n\t * @param {number} col\n\t * @returns {Cell}\n\t */\n\tgetCell(row, col) {\n\t\tif (row < 0 || row >= this.rows || col < 0 || col >= this.cols)\n\t\t\treturn null;\n\t\treturn this.board[row][col];\n\t}\n\n\tgetRemainingMines() {\n\t\tlet flagged = 0;\n\t\tlet totalMines = 0;\n\t\tfor (let i = 0; i < this.rows; i++) {\n\t\t\tfor (let j = 0; j < this.cols; j++) {\n\t\t\t\tif (this.board[i][j].isMine) totalMines++;\n\t\t\t\tif (this.board[i][j].isFlagged) flagged++;\n\t\t\t}\n\t\t}\n\t\treturn Math.max(0, totalMines - flagged);\n\t}\n\n\tgetBoard() {\n\t\treturn this.board;\n\t}\n\n\tgetSize() {\n\t\treturn { rows: this.rows, cols: this.cols };\n\t}\n}\n\nexport default Minesweeper;\nexport { Cell, Minesweeper };\n","class Chain {\n\tconstructor() {\n\t\tthis.cells = [];\n\t\tthis.hiddenNeighbors = [];\n\t}\n\n\taddCell(cell) {\n\t\tif (!this.cells.some((c) => c.row === cell.row && c.col === cell.col)) {\n\t\t\tthis.cells.push(cell);\n\t\t}\n\t}\n\n\tgetCells() {\n\t\treturn this.cells;\n\t}\n\n\tsetHiddenNeighbors(hiddenArr) {\n\t\tthis.hiddenNeighbors = hiddenArr;\n\t}\n\n\tgetHiddenNeighbors(minesweeper) {\n\t\tif (this.hiddenNeighbors && this.hiddenNeighbors.length > 0) {\n\t\t\treturn this.hiddenNeighbors;\n\t\t}\n\t\tconst hidden = new Set();\n\t\tfor (const { row, col } of this.cells) {\n\t\t\tfor (let dx = -1; dx <= 1; dx++) {\n\t\t\t\tfor (let dy = -1; dy <= 1; dy++) {\n\t\t\t\t\tif (dx === 0 && dy === 0) continue;\n\t\t\t\t\tconst ni = row + dx,\n\t\t\t\t\t\tnj = col + dy;\n\t\t\t\t\tif (\n\t\t\t\t\t\tni >= 0 &&\n\t\t\t\t\t\tni < minesweeper.rows &&\n\t\t\t\t\t\tnj >= 0 &&\n\t\t\t\t\t\tnj < minesweeper.cols\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst neighbor = minesweeper.getCell(ni, nj);\n\t\t\t\t\t\tif (!neighbor.isRevealed && !neighbor.isFlagged) {\n\t\t\t\t\t\t\thidden.add(`${ni},${nj}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.hiddenNeighbors = Array.from(hidden).map((str) =>\n\t\t\tstr.split(\",\").map(Number)\n\t\t);\n\t\treturn this.hiddenNeighbors;\n\t}\n}\n\nexport default Chain;\n","// filepath: /Entropy_Sweeper/Entropy_Sweeper/src/entropy/entropyCalculator.js\n/** @format */\n\nimport Minesweeper from \"../minesweeper.js\";\nimport { countValidStates } from \"./countValidStates.js\";\nimport Chain from \"../chains/Chain.js\";\n\nclass EntropyCalculator {\n\tentropy = 0;\n\tminesweeper = null;\n\tchains = [];\n\n\tconstructor(minesweeper) {\n\t\tif (!(minesweeper instanceof Minesweeper)) {\n\t\t\tthrow new Error(\"Invalid Minesweeper instance provided\");\n\t\t}\n\t\tthis.minesweeper = minesweeper;\n\t\tthis.entropy = 0;\n\t}\n\n\tcalculateEntropy() {\n\t\tthis.calculateChains();\n\t\tthis.entropy = 0;\n\n\t\tthis.chains.forEach((chain, index) => {\n\t\t\tconst { validCount, entropy, hiddenTileCount } = countValidStates(\n\t\t\t\tchain,\n\t\t\t\tthis.minesweeper\n\t\t\t);\n\t\t\tconsole.log(`Chain ${index + 1}:`);\n\t\t\tconsole.log(`  Hidden tiles: ${hiddenTileCount}`);\n\t\t\tconsole.log(`  Valid configurations: ${validCount}`);\n\t\t\tconsole.log(`  Entropy (bits): ${entropy.toFixed(4)}`);\n\t\t\tthis.entropy += entropy;\n\t\t});\n\n\t\tconsole.log(`\\nTotal Entropy: ${this.entropy.toFixed(4)} bits`);\n\t}\n\n\tprintChains() {\n\t\tif (this.chains.length === 0) {\n\t\t\tconsole.log(\"No chains found.\");\n\t\t\treturn;\n\t\t}\n\n\t\tthis.chains.forEach((chain, index) => {\n\t\t\tconsole.log(`Chain ${index + 1}:`);\n\t\t\tchain.print(this.minesweeper);\n\t\t});\n\t}\n\n\tcalculateChains() {\n\t\tthis.chains = [];\n\t\tconst visited = Array.from({ length: this.minesweeper.rows }, () =>\n\t\t\tArray(this.minesweeper.cols).fill(false)\n\t\t);\n\n\t\tconst isClueCell = (cell) => cell.isRevealed && cell.adjacentMines > 0;\n\n\t\tconst getHiddenNeighbors = (ci, cj) => {\n\t\t\tconst hidden = [];\n\t\t\tfor (let dx = -1; dx <= 1; dx++) {\n\t\t\t\tfor (let dy = -1; dy <= 1; dy++) {\n\t\t\t\t\tif (dx === 0 && dy === 0) continue;\n\t\t\t\t\tconst ni = ci + dx;\n\t\t\t\t\tconst nj = cj + dy;\n\t\t\t\t\tif (\n\t\t\t\t\t\tni >= 0 &&\n\t\t\t\t\t\tni < this.minesweeper.rows &&\n\t\t\t\t\t\tnj >= 0 &&\n\t\t\t\t\t\tnj < this.minesweeper.cols\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst neighbor = this.minesweeper.getCell(ni, nj);\n\t\t\t\t\t\tif (!neighbor.isRevealed && !neighbor.isFlagged) {\n\t\t\t\t\t\t\thidden.push([ni, nj]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn hidden;\n\t\t};\n\n\t\tconst buildGraphAndTraverse = (start, graph) => {\n\t\t\tconst visitedNodes = new Set();\n\t\t\tconst path = [];\n\n\t\t\tconst dfs = (node) => {\n\t\t\t\tconst key = `${node[0]},${node[1]}`;\n\t\t\t\tif (visitedNodes.has(key)) return;\n\t\t\t\tvisitedNodes.add(key);\n\t\t\t\tpath.push({ row: node[0], col: node[1] });\n\n\t\t\t\tlet neighbors = graph.get(key) || [];\n\t\t\t\tfor (const neighbor of neighbors) {\n\t\t\t\t\tdfs(neighbor);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tdfs(start);\n\t\t\treturn path;\n\t\t};\n\n\t\tfor (let i = 0; i < this.minesweeper.rows; i++) {\n\t\t\tfor (let j = 0; j < this.minesweeper.cols; j++) {\n\t\t\t\tconst cell = this.minesweeper.getCell(i, j);\n\t\t\t\tif (isClueCell(cell) && !visited[i][j]) {\n\t\t\t\t\tconst graph = new Map();\n\t\t\t\t\tconst queue = [[i, j]];\n\t\t\t\t\tvisited[i][j] = true;\n\n\t\t\t\t\twhile (queue.length > 0) {\n\t\t\t\t\t\tconst [ci, cj] = queue.shift();\n\t\t\t\t\t\tconst hiddenNeighbors = getHiddenNeighbors(ci, cj);\n\n\t\t\t\t\t\tfor (const [hi, hj] of hiddenNeighbors) {\n\t\t\t\t\t\t\tfor (let dx = -1; dx <= 1; dx++) {\n\t\t\t\t\t\t\t\tfor (let dy = -1; dy <= 1; dy++) {\n\t\t\t\t\t\t\t\t\tif (dx === 0 && dy === 0) continue;\n\t\t\t\t\t\t\t\t\tconst ni = hi + dx;\n\t\t\t\t\t\t\t\t\tconst nj = hj + dy;\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\tni >= 0 &&\n\t\t\t\t\t\t\t\t\t\tni < this.minesweeper.rows &&\n\t\t\t\t\t\t\t\t\t\tnj >= 0 &&\n\t\t\t\t\t\t\t\t\t\tnj < this.minesweeper.cols\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\tconst neighbor =\n\t\t\t\t\t\t\t\t\t\t\tthis.minesweeper.getCell(ni, nj);\n\t\t\t\t\t\t\t\t\t\tif (isClueCell(neighbor)) {\n\t\t\t\t\t\t\t\t\t\t\tif (!graph.has(`${ci},${cj}`))\n\t\t\t\t\t\t\t\t\t\t\t\tgraph.set(`${ci},${cj}`, []);\n\t\t\t\t\t\t\t\t\t\t\tgraph\n\t\t\t\t\t\t\t\t\t\t\t\t.get(`${ci},${cj}`)\n\t\t\t\t\t\t\t\t\t\t\t\t.push([ni, nj]);\n\t\t\t\t\t\t\t\t\t\t\tif (!visited[ni][nj]) {\n\t\t\t\t\t\t\t\t\t\t\t\tqueue.push([ni, nj]);\n\t\t\t\t\t\t\t\t\t\t\t\tvisited[ni][nj] = true;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst startNode = [i, j];\n\t\t\t\t\tconst chainCells = buildGraphAndTraverse(startNode, graph);\n\n\t\t\t\t\tif (chainCells.length > 0) {\n\t\t\t\t\t\tconst chain = new Chain();\n\t\t\t\t\t\tchainCells.forEach((cell) => chain.addCell(cell));\n\t\t\t\t\t\tthis.chains.push(chain);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport default EntropyCalculator;\n","/** @format */\n\nimport Minesweeper from \"./minesweeper.js\";\nimport entropyCalculator from \"./entropy/entropyCalculator.js\";\nimport SelfPlay from \"./selfPlay.js\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n\tconst gameBoard = document.getElementById(\"game-board\");\n\tconst resetButton = document.getElementById(\"reset-button\");\n\tconst settingsForm = document.getElementById(\"settings-form\");\n\n\tlet rows = 10;\n\tlet cols = 10;\n\tlet mines = 10;\n\tlet minesweeper;\n\tlet entropyCalculatorInstance;\n\n\tfunction initGame() {\n\t\ttry {\n\t\t\tminesweeper = new Minesweeper(rows, cols, mines);\n\t\t\tentropyCalculatorInstance = new entropyCalculator(minesweeper);\n\t\t\trenderBoard();\n\t\t} catch (error) {\n\t\t\talert(\"Failed to initialize game: \" + error.message);\n\t\t}\n\t}\n\n\tfunction renderBoard() {\n\t\tgameBoard.innerHTML = \"\";\n\t\tgameBoard.style.gridTemplateColumns = `repeat(${cols}, 30px)`;\n\n\t\tfor (let i = 0; i < rows; i++) {\n\t\t\tfor (let j = 0; j < cols; j++) {\n\t\t\t\tconst cell = document.createElement(\"div\");\n\t\t\t\tcell.className = \"cell\";\n\t\t\t\tcell.dataset.row = i;\n\t\t\t\tcell.dataset.col = j;\n\n\t\t\t\tcell.addEventListener(\"click\", () => handleCellClick(i, j));\n\t\t\t\tcell.addEventListener(\"contextmenu\", (e) => {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\thandleCellRightClick(i, j);\n\t\t\t\t});\n\n\t\t\t\tgameBoard.appendChild(cell);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction handleCellClick(row, col) {\n\t\tif (minesweeper.gameOver) return;\n\n\t\tconst cell = minesweeper.getCell(row, col);\n\t\tif (cell.isFlagged) return;\n\n\t\tlet result = minesweeper.revealCell(row, col);\n\n\t\tif (result.mineHit) {\n\t\t\talert(\"Game Over!\");\n\t\t\trevealAllMines();\n\t\t} else {\n\t\t\tconsole.clear();\n\t\t\tentropyCalculatorInstance.calculateChains();\n\t\t\tentropyCalculatorInstance.printChains();\n\t\t\trefreshBoard();\n\t\t}\n\t}\n\n\tfunction handleCellRightClick(row, col) {\n\t\tif (minesweeper.gameOver) return;\n\n\t\tconst cell = minesweeper.getCell(row, col);\n\t\tif (cell.isRevealed) return;\n\n\t\tminesweeper.flagCell(row, col);\n\t\trenderCell(row, col);\n\t}\n\n\tfunction refreshBoard() {\n\t\tfor (let row = 0; row < rows; row++) {\n\t\t\tfor (let col = 0; col < cols; col++) {\n\t\t\t\trenderCell(row, col);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction renderCell(row, col) {\n\t\tconst cell = minesweeper.getCell(row, col);\n\t\tconst cellElement = document.querySelector(\n\t\t\t`.cell[data-row=\"${row}\"][data-col=\"${col}\"]`\n\t\t);\n\n\t\tif (cell.isRevealed) {\n\t\t\tcellElement.classList.add(\"revealed\");\n\t\t\tif (cell.isMine) {\n\t\t\t\tcellElement.classList.add(\"mine\");\n\t\t\t\tcellElement.textContent = \"*\";\n\t\t\t} else {\n\t\t\t\tcellElement.textContent =\n\t\t\t\t\tcell.adjacentMines > 0 ? cell.adjacentMines : \"\";\n\t\t\t}\n\t\t} else if (cell.isFlagged) {\n\t\t\tcellElement.classList.add(\"flagged\");\n\t\t\tcellElement.textContent = \"F\";\n\t\t} else {\n\t\t\tcellElement.classList.remove(\"revealed\", \"mine\", \"flagged\");\n\t\t\tcellElement.textContent = \"\";\n\t\t}\n\t}\n\n\tfunction revealAllMines() {\n\t\tfor (let i = 0; i < rows; i++) {\n\t\t\tfor (let j = 0; j < cols; j++) {\n\t\t\t\tconst cell = minesweeper.getCell(i, j);\n\t\t\t\tif (cell.isMine) {\n\t\t\t\t\trenderCell(i, j);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction doNextMove() {\n\t\tSelfPlay(minesweeper);\n\t}\n\tsettingsForm.addEventListener(\"submit\", (event) => {\n\t\tevent.preventDefault();\n\t\trows = parseInt(document.getElementById(\"rows\").value);\n\t\tcols = parseInt(document.getElementById(\"cols\").value);\n\t\tmines = parseInt(document.getElementById(\"mines\").value);\n\t\tinitGame();\n\t});\n\n\tresetButton.addEventListener(\"click\", initGame);\n\n\tinitGame();\n});\n"],"names":["exports","Symbol","toStringTag","Object","defineProperty","value","Cell","row","col","isMine","isRevealed","isFlagged","adjacentMines","adjacentCells","constructor","this","toString","isEmpty","isHidden","isVisible","isExploded","board","rows","cols","mineCount","isFirstCellRevealed","gameOver","won","r","c","Number","isInteger","Error","i","j","placedMines","Math","floor","random","cell","count","x","y","newRow","newCol","mineHit","revealed","revealCell","result","getRemainingMines","boardToString","output","rowStr","trim","printBoard","console","log","flagCell","getCell","flagged","totalMines","max","getBoard","getSize","cells","hiddenNeighbors","addCell","some","push","getCells","setHiddenNeighbors","hiddenArr","getHiddenNeighbors","minesweeper","length","hidden","Set","dx","dy","ni","nj","neighbor","add","Array","from","map","str","split","entropy","chains","Minesweeper","calculateEntropy","calculateChains","forEach","chain","index","validCount","hiddenTileCount","countValidStates","toFixed","printChains","print","visited","fill","isClueCell","ci","cj","buildGraphAndTraverse","start","graph","visitedNodes","path","dfs","node","key","has","neighbors","get","Map","queue","shift","hi","hj","set","chainCells","Chain","document","addEventListener","gameBoard","getElementById","resetButton","settingsForm","entropyCalculatorInstance","mines","initGame","entropyCalculator","innerHTML","style","gridTemplateColumns","createElement","className","dataset","handleCellClick","e","preventDefault","handleCellRightClick","appendChild","renderBoard","error","alert","message","renderCell","revealAllMines","clear","refreshBoard","cellElement","querySelector","classList","textContent","remove","event","parseInt"],"sourceRoot":""}