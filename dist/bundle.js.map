{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack:///./src/minesweeper.js","webpack:///./src/chains/Chain.js","webpack:///./src/entropy/entropyCalculator.js","webpack:///./src/entropy/countValidStates.js","webpack:///./src/selfPlay.js","webpack:///./src/script.js"],"sourcesContent":["/** @format */\r\n\r\nclass Cell {\r\n\trow = 0;\r\n\tcol = 0;\r\n\tisMine = false;\r\n\tisRevealed = false;\r\n\tisFlagged = false;\r\n\tadjacentMines = 0;\r\n\tadjacentCells = 8;\r\n\r\n\tconstructor(\r\n\t\trow,\r\n\t\tcol,\r\n\t\tisMine = false,\r\n\t\tisRevealed = false,\r\n\t\tisFlagged = false,\r\n\t\tadjacentMines = 0,\r\n\t\tadjacentCells = 8\r\n\t) {\r\n\t\tthis.row = row;\r\n\t\tthis.col = col;\r\n\t\tthis.isMine = isMine;\r\n\t\tthis.isRevealed = isRevealed;\r\n\t\tthis.isFlagged = isFlagged;\r\n\t\tthis.adjacentMines = adjacentMines;\r\n\t\tthis.adjacentCells = adjacentCells;\r\n\t}\r\n\r\n\ttoString() {\r\n\t\tif (this.isRevealed) {\r\n\t\t\treturn this.isMine ? \"*\" : this.adjacentMines.toString();\r\n\t\t} else if (this.isFlagged) {\r\n\t\t\treturn \"F\";\r\n\t\t} else {\r\n\t\t\treturn \".\";\r\n\t\t}\r\n\t}\r\n\r\n\tget isEmpty() {\r\n\t\treturn !this.isMine && !this.isRevealed && !this.isFlagged;\r\n\t}\r\n\tget isHidden() {\r\n\t\treturn !this.isRevealed && !this.isFlagged;\r\n\t}\r\n\tget isVisible() {\r\n\t\treturn this.isRevealed || this.isFlagged;\r\n\t}\r\n\tget isExploded() {\r\n\t\treturn this.isRevealed && this.isMine;\r\n\t}\r\n}\r\n\r\nclass Minesweeper {\r\n\tboard = [];\r\n\trows = 0;\r\n\tcols = 0;\r\n\tmineCount = 0;\r\n\tisFirstCellRevealed = true;\r\n\tgameOver = false;\r\n\twon = false;\r\n\r\n\tconstructor(r, c, mineCount) {\r\n\t\tif (\r\n\t\t\t!Number.isInteger(r) ||\r\n\t\t\t!Number.isInteger(c) ||\r\n\t\t\t!Number.isInteger(mineCount) ||\r\n\t\t\tr <= 0 ||\r\n\t\t\tc <= 0 ||\r\n\t\t\tmineCount < 0 ||\r\n\t\t\tmineCount >= r * c\r\n\t\t) {\r\n\t\t\tthrow new Error(\"Invalid board size or mine count\");\r\n\t\t}\r\n\t\tthis.rows = r;\r\n\t\tthis.cols = c;\r\n\t\tthis.mineCount = mineCount;\r\n\t\tthis.#createBoard();\r\n\t\tthis.#placeMines();\r\n\t\tthis.#calculateAdjacentMines();\r\n\t}\r\n\r\n\t#createBoard() {\r\n\t\tthis.board = [];\r\n\t\tfor (let i = 0; i < this.rows; i++) {\r\n\t\t\tthis.board[i] = [];\r\n\t\t\tfor (let j = 0; j < this.cols; j++) {\r\n\t\t\t\tthis.board[i][j] = new Cell(i, j);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.gameOver = false;\r\n\t}\r\n\r\n\t#placeMines() {\r\n\t\tlet placedMines = 0;\r\n\t\twhile (placedMines < this.mineCount) {\r\n\t\t\tconst row = Math.floor(Math.random() * this.rows);\r\n\t\t\tconst col = Math.floor(Math.random() * this.cols);\r\n\t\t\tconst cell = this.board[row][col];\r\n\t\t\tif (!cell.isMine) {\r\n\t\t\t\tcell.isMine = true;\r\n\t\t\t\tplacedMines++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t#calculateAdjacentMines() {\r\n\t\tfor (let i = 0; i < this.rows; i++) {\r\n\t\t\tfor (let j = 0; j < this.cols; j++) {\r\n\t\t\t\tconst cell = this.board[i][j];\r\n\t\t\t\tif (cell.isMine) continue;\r\n\t\t\t\tlet count = 0;\r\n\t\t\t\tfor (let x = -1; x <= 1; x++) {\r\n\t\t\t\t\tfor (let y = -1; y <= 1; y++) {\r\n\t\t\t\t\t\tif (x === 0 && y === 0) continue;\r\n\t\t\t\t\t\tconst newRow = i + x;\r\n\t\t\t\t\t\tconst newCol = j + y;\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tnewRow >= 0 &&\r\n\t\t\t\t\t\t\tnewRow < this.rows &&\r\n\t\t\t\t\t\t\tnewCol >= 0 &&\r\n\t\t\t\t\t\t\tnewCol < this.cols\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tif (this.board[newRow][newCol].isMine) count++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcell.adjacentMines = count;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\trevealCell(row, col) {\r\n\t\tif (this.won || this.gameOver) return { mineHit: false, revealed: 0 };\r\n\t\tif (row < 0 || row >= this.rows || col < 0 || col >= this.cols) {\r\n\t\t\treturn { mineHit: false, revealed: 0 };\r\n\t\t}\r\n\t\tconst cell = this.board[row][col];\r\n\t\tif (cell.isRevealed || cell.isFlagged) {\r\n\t\t\treturn { mineHit: false, revealed: 0 };\r\n\t\t}\r\n\t\tif (this.isFirstCellRevealed) {\r\n\t\t\tthis.isFirstCellRevealed = false;\r\n\t\t\twhile (cell.isMine) {\r\n\t\t\t\tcell.isMine = false;\r\n\t\t\t\tthis.#placeMines(1);\r\n\t\t\t\tthis.#calculateAdjacentMines();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.board[row][col].isRevealed = true;\r\n\r\n\t\tfor (let x = -1; x <= 1; x++) {\r\n\t\t\tfor (let y = -1; y <= 1; y++) {\r\n\t\t\t\tif (x === 0 && y === 0) continue;\r\n\t\t\t\tconst newRow = row + x;\r\n\t\t\t\tconst newCol = col + y;\r\n\t\t\t\tif (\r\n\t\t\t\t\tnewRow >= 0 &&\r\n\t\t\t\t\tnewRow < this.rows &&\r\n\t\t\t\t\tnewCol >= 0 &&\r\n\t\t\t\t\tnewCol < this.cols\r\n\t\t\t\t) {\r\n\t\t\t\t\tthis.board[newRow][newCol].adjacentCells--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.board[row][col].isMine) {\r\n\t\t\tthis.gameOver = true;\r\n\t\t\treturn { mineHit: true, revealed: 1 };\r\n\t\t}\r\n\r\n\t\tlet revealed = 1;\r\n\t\tif (this.board[row][col].adjacentMines === 0) {\r\n\t\t\tfor (let x = -1; x <= 1; x++) {\r\n\t\t\t\tfor (let y = -1; y <= 1; y++) {\r\n\t\t\t\t\tif (x === 0 && y === 0) continue;\r\n\t\t\t\t\tconst result = this.revealCell(row + x, col + y);\r\n\t\t\t\t\trevealed += result.revealed;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.getRemainingMines() <= 0) {\r\n\t\t\tthis.won = true;\r\n\t\t}\r\n\r\n\t\treturn { mineHit: false, revealed };\r\n\t}\r\n\r\n\tboardToString() {\r\n\t\tlet output = \"\";\r\n\t\tfor (let i = 0; i < this.rows; i++) {\r\n\t\t\tlet rowStr = \"\";\r\n\t\t\tfor (let j = 0; j < this.cols; j++) {\r\n\t\t\t\tif (this.board[i][j].isRevealed) {\r\n\t\t\t\t\tif (this.board[i][j].isMine) {\r\n\t\t\t\t\t\trowStr += \"* \";\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trowStr += this.board[i][j].adjacentMines + \" \";\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (this.board[i][j].isFlagged) {\r\n\t\t\t\t\trowStr += \"F \";\r\n\t\t\t\t} else {\r\n\t\t\t\t\trowStr += \". \";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\toutput += rowStr.trim() + \"\\n\";\r\n\t\t}\r\n\t\treturn output.trim();\r\n\t}\r\n\r\n\tprintBoard() {\r\n\t\tconsole.log(this.boardToString());\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param {number} row\r\n\t * @param {number} col\r\n\t * @returns {boolean}\r\n\t */\r\n\tflagCell(row, col) {\r\n\t\tif (this.gameOver) return false;\r\n\t\tif (row < 0 || row >= this.rows || col < 0 || col >= this.cols) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tconst cell = this.board[row][col];\r\n\t\tif (cell.isRevealed) return false;\r\n\t\tcell.isFlagged = !cell.isFlagged;\r\n\t\tif (cell.isFlagged) {\r\n\t\t\tif (this.getRemainingMines() <= 0) {\r\n\t\t\t\tthis.won = true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param {number} row\r\n\t * @param {number} col\r\n\t * @returns {Cell}\r\n\t */\r\n\tgetCell(row, col) {\r\n\t\tif (row < 0 || row >= this.rows || col < 0 || col >= this.cols)\r\n\t\t\treturn null;\r\n\t\treturn this.board[row][col];\r\n\t}\r\n\r\n\tgetRemainingMines() {\r\n\t\tlet flagged = 0;\r\n\t\tlet totalMines = 0;\r\n\t\tfor (let i = 0; i < this.rows; i++) {\r\n\t\t\tfor (let j = 0; j < this.cols; j++) {\r\n\t\t\t\tif (this.board[i][j].isMine) totalMines++;\r\n\t\t\t\tif (this.board[i][j].isFlagged) flagged++;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn Math.max(0, totalMines - flagged);\r\n\t}\r\n\r\n\tgetBoard() {\r\n\t\treturn this.board;\r\n\t}\r\n\r\n\tgetSize() {\r\n\t\treturn { rows: this.rows, cols: this.cols };\r\n\t}\r\n}\r\n\r\nexport default Minesweeper;\r\nexport { Cell, Minesweeper };\r\n","class Chain {\r\n\tconstructor() {\r\n\t\tthis.cells = [];\r\n\t\tthis.hiddenNeighbors = [];\r\n\t}\r\n\r\n\taddCell(cell) {\r\n\t\tif (!this.cells.some((c) => c.row === cell.row && c.col === cell.col)) {\r\n\t\t\tthis.cells.push(cell);\r\n\t\t}\r\n\t}\r\n\r\n\tgetCells() {\r\n\t\treturn this.cells;\r\n\t}\r\n\r\n\tsetHiddenNeighbors(hiddenArr) {\r\n\t\tthis.hiddenNeighbors = hiddenArr;\r\n\t}\r\n\r\n\tgetHiddenNeighbors(minesweeper) {\r\n\t\tif (this.hiddenNeighbors && this.hiddenNeighbors.length > 0) {\r\n\t\t\treturn this.hiddenNeighbors;\r\n\t\t}\r\n\t\tconst hidden = new Set();\r\n\t\tfor (const { row, col } of this.cells) {\r\n\t\t\tfor (let dx = -1; dx <= 1; dx++) {\r\n\t\t\t\tfor (let dy = -1; dy <= 1; dy++) {\r\n\t\t\t\t\tif (dx === 0 && dy === 0) continue;\r\n\t\t\t\t\tconst ni = row + dx,\r\n\t\t\t\t\t\tnj = col + dy;\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tni >= 0 &&\r\n\t\t\t\t\t\tni < minesweeper.rows &&\r\n\t\t\t\t\t\tnj >= 0 &&\r\n\t\t\t\t\t\tnj < minesweeper.cols\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tconst neighbor = minesweeper.getCell(ni, nj);\r\n\t\t\t\t\t\tif (!neighbor.isRevealed && !neighbor.isFlagged) {\r\n\t\t\t\t\t\t\thidden.add(`${ni},${nj}`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.hiddenNeighbors = Array.from(hidden).map((str) =>\r\n\t\t\tstr.split(\",\").map(Number)\r\n\t\t);\r\n\t\treturn this.hiddenNeighbors;\r\n\t}\r\n\r\n\tprint(minesweeper) {\r\n\t\tthis.cells.forEach(({ row, col }) => {\r\n\t\t\tconst cell = minesweeper.getCell(row, col);\r\n\t\t\tconsole.log(\r\n\t\t\t\t`Row: ${row}, Col: ${col}, Adjacent Mines: ${cell.adjacentMines}`\r\n\t\t\t);\r\n\t\t});\r\n\t\tconsole.log(\"Hidden neighbors:\", this.hiddenNeighbors);\r\n\t}\r\n}\r\n\r\nexport default Chain;\r\n","// filepath: /Entropy_Sweeper/Entropy_Sweeper/src/entropy/entropyCalculator.js\r\n/** @format */\r\n\r\nimport Minesweeper from \"../minesweeper.js\";\r\nimport countValidStates from \"./countValidStates.js\";\r\nimport Chain from \"../chains/Chain.js\";\r\n\r\nclass EntropyCalculator {\r\n\tentropy = 0;\r\n\tminesweeper = null;\r\n\tchains = [];\r\n\r\n\tconstructor(minesweeper) {\r\n\t\tif (!(minesweeper instanceof Minesweeper)) {\r\n\t\t\tthrow new Error(\"Invalid Minesweeper instance provided\");\r\n\t\t}\r\n\t\tthis.minesweeper = minesweeper;\r\n\t\tthis.entropy = 0;\r\n\t}\r\n\r\n\tcalculateEntropy() {\r\n\t\tthis.calculateChains();\r\n\t\tthis.entropy = 0;\r\n\r\n\t\tthis.chains.forEach((chain, index) => {\r\n\t\t\tconst { validCount, entropy, hiddenTileCount } = countValidStates(\r\n\t\t\t\tchain,\r\n\t\t\t\tthis.minesweeper\r\n\t\t\t);\r\n\t\t\tconsole.log(`Chain ${index + 1}:`);\r\n\t\t\tconsole.log(`  Hidden tiles: ${hiddenTileCount}`);\r\n\t\t\tconsole.log(`  Valid configurations: ${validCount}`);\r\n\t\t\tconsole.log(`  Entropy (bits): ${entropy.toFixed(4)}`);\r\n\t\t\tthis.entropy += entropy;\r\n\t\t});\r\n\r\n\t\tconsole.log(`\\nTotal Entropy: ${this.entropy.toFixed(4)} bits`);\r\n\t}\r\n\r\n\tprintChains() {\r\n\t\tif (this.chains.length === 0) {\r\n\t\t\tconsole.log(\"No chains found.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.chains.forEach((chain, index) => {\r\n\t\t\tconsole.log(`Chain ${index + 1}:`);\r\n\t\t\tchain.print(this.minesweeper);\r\n\t\t});\r\n\t}\r\n\r\n\tcalculateChains() {\r\n\t\tthis.chains = [];\r\n\t\tconst visited = Array.from({ length: this.minesweeper.rows }, () =>\r\n\t\t\tArray(this.minesweeper.cols).fill(false)\r\n\t\t);\r\n\r\n\t\tconst isClueCell = (cell) => cell.isRevealed && cell.adjacentMines > 0;\r\n\r\n\t\tconst getHiddenNeighbors = (ci, cj) => {\r\n\t\t\tconst hidden = [];\r\n\t\t\tfor (let dx = -1; dx <= 1; dx++) {\r\n\t\t\t\tfor (let dy = -1; dy <= 1; dy++) {\r\n\t\t\t\t\tif (dx === 0 && dy === 0) continue;\r\n\t\t\t\t\tconst ni = ci + dx;\r\n\t\t\t\t\tconst nj = cj + dy;\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tni >= 0 &&\r\n\t\t\t\t\t\tni < this.minesweeper.rows &&\r\n\t\t\t\t\t\tnj >= 0 &&\r\n\t\t\t\t\t\tnj < this.minesweeper.cols\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tconst neighbor = this.minesweeper.getCell(ni, nj);\r\n\t\t\t\t\t\tif (!neighbor.isRevealed && !neighbor.isFlagged) {\r\n\t\t\t\t\t\t\thidden.push([ni, nj]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn hidden;\r\n\t\t};\r\n\r\n\t\tconst buildGraphAndTraverse = (start, graph) => {\r\n\t\t\tconst visitedNodes = new Set();\r\n\t\t\tconst path = [];\r\n\r\n\t\t\tconst dfs = (node) => {\r\n\t\t\t\tconst key = `${node[0]},${node[1]}`;\r\n\t\t\t\tif (visitedNodes.has(key)) return;\r\n\t\t\t\tvisitedNodes.add(key);\r\n\t\t\t\tpath.push({ row: node[0], col: node[1] });\r\n\r\n\t\t\t\tlet neighbors = graph.get(key) || [];\r\n\t\t\t\tfor (const neighbor of neighbors) {\r\n\t\t\t\t\tdfs(neighbor);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tdfs(start);\r\n\t\t\treturn path;\r\n\t\t};\r\n\r\n\t\tfor (let i = 0; i < this.minesweeper.rows; i++) {\r\n\t\t\tfor (let j = 0; j < this.minesweeper.cols; j++) {\r\n\t\t\t\tconst cell = this.minesweeper.getCell(i, j);\r\n\t\t\t\tif (isClueCell(cell) && !visited[i][j]) {\r\n\t\t\t\t\tconst graph = new Map();\r\n\t\t\t\t\tconst queue = [[i, j]];\r\n\t\t\t\t\tvisited[i][j] = true;\r\n\r\n\t\t\t\t\twhile (queue.length > 0) {\r\n\t\t\t\t\t\tconst [ci, cj] = queue.shift();\r\n\t\t\t\t\t\tconst hiddenNeighbors = getHiddenNeighbors(ci, cj);\r\n\r\n\t\t\t\t\t\tfor (const [hi, hj] of hiddenNeighbors) {\r\n\t\t\t\t\t\t\tfor (let dx = -1; dx <= 1; dx++) {\r\n\t\t\t\t\t\t\t\tfor (let dy = -1; dy <= 1; dy++) {\r\n\t\t\t\t\t\t\t\t\tif (dx === 0 && dy === 0) continue;\r\n\t\t\t\t\t\t\t\t\tconst ni = hi + dx;\r\n\t\t\t\t\t\t\t\t\tconst nj = hj + dy;\r\n\t\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\t\tni >= 0 &&\r\n\t\t\t\t\t\t\t\t\t\tni < this.minesweeper.rows &&\r\n\t\t\t\t\t\t\t\t\t\tnj >= 0 &&\r\n\t\t\t\t\t\t\t\t\t\tnj < this.minesweeper.cols\r\n\t\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\t\tconst neighbor =\r\n\t\t\t\t\t\t\t\t\t\t\tthis.minesweeper.getCell(ni, nj);\r\n\t\t\t\t\t\t\t\t\t\tif (isClueCell(neighbor)) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (!graph.has(`${ci},${cj}`))\r\n\t\t\t\t\t\t\t\t\t\t\t\tgraph.set(`${ci},${cj}`, []);\r\n\t\t\t\t\t\t\t\t\t\t\tgraph\r\n\t\t\t\t\t\t\t\t\t\t\t\t.get(`${ci},${cj}`)\r\n\t\t\t\t\t\t\t\t\t\t\t\t.push([ni, nj]);\r\n\t\t\t\t\t\t\t\t\t\t\tif (!visited[ni][nj]) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tqueue.push([ni, nj]);\r\n\t\t\t\t\t\t\t\t\t\t\t\tvisited[ni][nj] = true;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst startNode = [i, j];\r\n\t\t\t\t\tconst chainCells = buildGraphAndTraverse(startNode, graph);\r\n\r\n\t\t\t\t\tif (chainCells.length > 0) {\r\n\t\t\t\t\t\tconst chain = new Chain();\r\n\t\t\t\t\t\tchainCells.forEach((cell) => chain.addCell(cell));\r\n\t\t\t\t\t\tthis.chains.push(chain);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default EntropyCalculator;\r\n","function countValidStates(chain, minesweeper) {\r\n\tconst hiddenTiles = chain.getHiddenNeighbors(minesweeper);\r\n\tconst clueCells = chain.getCells();\r\n\tconst totalConfigs = 1 << hiddenTiles.length;\r\n\tlet validCount = 0;\r\n\r\n\tfor (let config = 0; config < totalConfigs; config++) {\r\n\t\tconst mineMap = new Map(); // \"row,col\" => true/false\r\n\t\thiddenTiles.forEach(([r, c], idx) => {\r\n\t\t\tconst isMine = (config & (1 << idx)) !== 0;\r\n\t\t\tmineMap.set(`${r},${c}`, isMine);\r\n\t\t});\r\n\r\n\t\tlet isValid = true;\r\n\t\tfor (const { row, col } of clueCells) {\r\n\t\t\tlet count = 0;\r\n\t\t\tfor (let dx = -1; dx <= 1; dx++) {\r\n\t\t\t\tfor (let dy = -1; dy <= 1; dy++) {\r\n\t\t\t\t\tif (dx === 0 && dy === 0) continue;\r\n\t\t\t\t\tconst ni = row + dx,\r\n\t\t\t\t\t\tnj = col + dy;\r\n\t\t\t\t\tconst key = `${ni},${nj}`;\r\n\t\t\t\t\tif (mineMap.get(key)) count++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tconst clue = minesweeper.getCell(row, col);\r\n\t\t\tif (count !== clue.adjacentMines) {\r\n\t\t\t\tisValid = false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (isValid) validCount++;\r\n\t}\r\n\r\n\treturn {\r\n\t\tvalidCount,\r\n\t\tentropy: validCount > 0 ? Math.log2(validCount) : 0,\r\n\t\thiddenTileCount: hiddenTiles.length\r\n\t};\r\n}\r\n\r\nexport default countValidStates;\r\n","/** @format */\r\n\r\nimport { Minesweeper, Cell } from \"./minesweeper.js\";\r\n\r\nclass SelfPlay {\r\n\tms;\r\n\t/**\r\n\t *\r\n\t * @param {Minesweeper} minesweeper\r\n\t */\r\n\tconstructor(minesweeper) {\r\n\t\tif ((!minesweeper) instanceof Minesweeper) {\r\n\t\t\tthrow new Error(\"Invalid Minesweeper instance provided\");\r\n\t\t}\r\n\t\tthis.ms = minesweeper;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param {number} row\r\n\t * @param {number} col\r\n\t * @returns {Cell[]}\r\n\t */\r\n\t_getAdjacentCells(row, col) {\r\n\t\tlet size = this.ms.getSize();\r\n\t\tlet adjacentCells = [];\r\n\t\tfor (let i = Math.max(row - 1 , 0); i < size.rows && i <= row + 1; i++) {\r\n\t\t\tfor (let j = Math.max(col - 1 , 0); j < size.cols && j <= col + 1; j++) {\r\n\t\t\t\tif (i != row || j != col) {\r\n\t\t\t\t\tadjacentCells.push(this.ms.getCell(i, j));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn adjacentCells;\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the best next possible move\r\n\t * @returns {{number}row,{number}col}\r\n\t */\r\n\tnextMove() {\r\n\t\tlet size = this.ms.getSize();\r\n\t\tlet retval = undefined;\r\n\r\n\t\tfor (let col = 0; col < size.cols; col++) {\r\n\t\t\tfor (let row = 0; row < size.rows; row++) {\r\n\t\t\r\n\t\t\t\tlet cell = this.ms.getCell(row, col);\r\n\t\t\t\tif (cell.isRevealed && cell.adjacentMines > 0) {\r\n\r\n\t\t\t\t\tlet adjacents = this._getAdjacentCells(row, col);\r\n\t\t\t\t\tlet unknown_adjacents = 0;\r\n\t\t\t\t\tlet known_bomb_adjacents = 0;\r\n\t\t\t\t\t\r\n\t\t\t\t\tadjacents.forEach((adjacent) => {\r\n\t\t\t\t\t\tif (adjacent.isHidden) unknown_adjacents++;\r\n\t\t\t\t\t\telse if (adjacent.isFlagged) known_bomb_adjacents++;\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tcell.adjacentMines == unknown_adjacents + known_bomb_adjacents\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tadjacents.forEach((adjacent) => {\r\n\t\t\t\t\t\t\tif (!adjacent.isFlagged){\r\n\t\t\t\t\t\t\t\tthis.ms.flagCell(adjacent.row, adjacent.col);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else if (retval === undefined && cell.adjacentMines == known_bomb_adjacents) {\r\n\r\n\t\t\t\t\t\tretval = undefined;\r\n\t\t\t\t\t\tadjacents.every((adjacent) => \r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\t!adjacent.isFlagged &&\r\n\t\t\t\t\t\t\t\t\t!adjacent.isRevealed\r\n\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\tretval = {row: adjacent.row,col: adjacent.col}\r\n\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t} else return true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn retval;\r\n\t}\r\n\t\r\n}\r\n\r\nexport default SelfPlay;\r\n","/** @format */\r\n\r\nimport Minesweeper from \"./minesweeper.js\";\r\nimport entropyCalculator from \"./entropy/entropyCalculator.js\";\r\nimport SelfPlay from \"./selfPlay.js\";\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n\tconst gameBoard = document.getElementById(\"game-board\");\r\n\tconst resetButton = document.getElementById(\"reset-button\");\r\n\tconst settingsForm = document.getElementById(\"settings-form\");\r\n\tconst nextMoveButton = document.getElementById(\"next-move-button\");\r\n\r\n\tlet rows = 10;\r\n\tlet cols = 10;\r\n\tlet mines = 10;\r\n\tlet minesweeper;\r\n\tlet entropyCalculatorInstance;\r\n\tlet selfPlay;\r\n\r\n\tfunction initGame() {\r\n\t\ttry {\r\n\t\t\tminesweeper = new Minesweeper(rows, cols, mines);\r\n\t\t\tentropyCalculatorInstance = new entropyCalculator(minesweeper);\r\n\t\t\tselfPlay = new SelfPlay(minesweeper);\r\n\t\t\trenderBoard();\r\n\t\t} catch (error) {\r\n\t\t\talert(\"Failed to initialize game: \" + error.message);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction renderBoard() {\r\n\t\tgameBoard.innerHTML = \"\";\r\n\t\tgameBoard.style.gridTemplateColumns = `repeat(${cols}, 30px)`;\r\n\r\n\t\tfor (let i = 0; i < rows; i++) {\r\n\t\t\tfor (let j = 0; j < cols; j++) {\r\n\t\t\t\tconst cell = document.createElement(\"div\");\r\n\t\t\t\tcell.className = \"cell\";\r\n\t\t\t\tcell.dataset.row = i;\r\n\t\t\t\tcell.dataset.col = j;\r\n\r\n\t\t\t\tcell.addEventListener(\"click\", () => handleCellClick(i, j));\r\n\t\t\t\tcell.addEventListener(\"contextmenu\", (e) => {\r\n\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\thandleCellRightClick(i, j);\r\n\t\t\t\t});\r\n\r\n\t\t\t\tgameBoard.appendChild(cell);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction handleCellClick(row, col) {\r\n\t\tif (minesweeper.gameOver) return;\r\n\r\n\t\tconst cell = minesweeper.getCell(row, col);\r\n\t\tif (cell.isFlagged) return;\r\n\r\n\t\tlet result = minesweeper.revealCell(row, col);\r\n\r\n\t\tif (result.mineHit) {\r\n\t\t\talert(\"Game Over!\");\r\n\t\t\trevealAllMines();\r\n\t\t} else {\r\n\t\t\tconsole.clear();\r\n\t\t\tentropyCalculatorInstance.calculateChains();\r\n\t\t\tentropyCalculatorInstance.printChains();\r\n\t\t\trefreshBoard();\r\n\t\t}\r\n\t}\r\n\r\n\tfunction handleCellRightClick(row, col) {\r\n\t\tif (minesweeper.gameOver) return;\r\n\r\n\t\tconst cell = minesweeper.getCell(row, col);\r\n\t\tif (cell.isRevealed) return;\r\n\r\n\t\tminesweeper.flagCell(row, col);\r\n\t\trenderCell(row, col);\r\n\t}\r\n\r\n\tfunction refreshBoard() {\r\n\t\tfor (let row = 0; row < rows; row++) {\r\n\t\t\tfor (let col = 0; col < cols; col++) {\r\n\t\t\t\trenderCell(row, col);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction renderCell(row, col) {\r\n\t\tconst cell = minesweeper.getCell(row, col);\r\n\t\tconst cellElement = document.querySelector(\r\n\t\t\t`.cell[data-row=\"${row}\"][data-col=\"${col}\"]`\r\n\t\t);\r\n\r\n\t\tif (cell.isRevealed) {\r\n\t\t\tcellElement.classList.add(\"revealed\");\r\n\t\t\tif (cell.isMine) {\r\n\t\t\t\tcellElement.classList.add(\"mine\");\r\n\t\t\t\tcellElement.textContent = \"*\";\r\n\t\t\t} else {\r\n\t\t\t\tcellElement.textContent =\r\n\t\t\t\t\tcell.adjacentMines > 0 ? cell.adjacentMines : \"\";\r\n\t\t\t}\r\n\t\t} else if (cell.isFlagged) {\r\n\t\t\tcellElement.classList.add(\"flagged\");\r\n\t\t\tcellElement.textContent = \"F\";\r\n\t\t} else {\r\n\t\t\tcellElement.classList.remove(\"revealed\", \"mine\", \"flagged\");\r\n\t\t\tcellElement.textContent = \"\";\r\n\t\t}\r\n\t}\r\n\r\n\tfunction revealAllMines() {\r\n\t\tfor (let i = 0; i < rows; i++) {\r\n\t\t\tfor (let j = 0; j < cols; j++) {\r\n\t\t\t\tconst cell = minesweeper.getCell(i, j);\r\n\t\t\t\tif (cell.isMine) {\r\n\t\t\t\t\trenderCell(i, j);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tsettingsForm.addEventListener(\"submit\", (event) => {\r\n\t\tevent.preventDefault();\r\n\t\trows = parseInt(document.getElementById(\"rows\").value);\r\n\t\tcols = parseInt(document.getElementById(\"cols\").value);\r\n\t\tmines = parseInt(document.getElementById(\"mines\").value);\r\n\t\tinitGame();\r\n\t});\r\n\r\n\tresetButton.addEventListener(\"click\", initGame);\r\n\r\n\tfunction doNextMove() {\r\n\t\tlet move = selfPlay.nextMove();\r\n\t\tconsole.log(move);\r\n\t\tif(move !== undefined){\r\n\t\t\tminesweeper.revealCell(move.row,move.col);\r\n\t\t}\r\n\t\trefreshBoard();\r\n\t}\r\n\r\n\tnextMoveButton.addEventListener(\"click\",doNextMove);\r\n\tinitGame();\r\n});\r\n"],"names":["Cell","row","col","isMine","isRevealed","isFlagged","adjacentMines","adjacentCells","constructor","this","toString","isEmpty","isHidden","isVisible","isExploded","Minesweeper","board","rows","cols","mineCount","isFirstCellRevealed","gameOver","won","r","c","Number","isInteger","Error","i","j","placedMines","Math","floor","random","cell","count","x","y","newRow","newCol","revealCell","mineHit","revealed","getRemainingMines","boardToString","output","rowStr","trim","printBoard","console","log","flagCell","getCell","flagged","totalMines","max","getBoard","getSize","cells","hiddenNeighbors","addCell","some","push","getCells","setHiddenNeighbors","hiddenArr","getHiddenNeighbors","minesweeper","length","hidden","Set","dx","dy","ni","nj","neighbor","add","Array","from","map","str","split","print","forEach","entropy","chains","calculateEntropy","calculateChains","chain","index","validCount","hiddenTileCount","hiddenTiles","clueCells","totalConfigs","config","mineMap","Map","idx","set","isValid","key","get","log2","countValidStates","toFixed","printChains","visited","fill","isClueCell","ci","cj","buildGraphAndTraverse","start","graph","visitedNodes","path","dfs","node","has","neighbors","queue","shift","hi","hj","chainCells","Chain","ms","_getAdjacentCells","size","nextMove","retval","adjacents","unknown_adjacents","known_bomb_adjacents","adjacent","undefined","every","document","addEventListener","gameBoard","getElementById","resetButton","settingsForm","nextMoveButton","entropyCalculatorInstance","selfPlay","mines","initGame","entropyCalculator","SelfPlay","innerHTML","style","gridTemplateColumns","createElement","className","dataset","handleCellClick","e","preventDefault","handleCellRightClick","appendChild","renderBoard","error","alert","message","renderCell","revealAllMines","clear","refreshBoard","cellElement","querySelector","classList","textContent","remove","event","parseInt","value","move"],"sourceRoot":""}